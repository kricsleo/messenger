import { downloadVSCodeTheme, VSCodeThemeId, normalizeThemeName } from 'vscode-theme-to'
import fs from 'fs/promises'
import path from 'path'
import chalk from 'chalk'

const THEME_OPTIONS: ThemeOptions = {
  light: 'akamud.vscode-theme-onelight.atom one light',
  dark: 'kricsleo.gentle-clean.Gentle Clean Vitesse',
};

(async () => {
  await Promise.all(Object.values(THEME_OPTIONS).map(async themeId => {
    const themeJSON = await downloadVSCodeTheme(themeId)
    const destPath = path.resolve(
      process.cwd(), 
      `./components/Editor/themes/${normalizeThemeName(themeId)}.json`
    )
    await fs.writeFile(destPath, JSON.stringify(themeJSON, null, 2))
  }))
  const themeDeclaresPath = path.resolve(
    process.cwd(), 
    `./components/Editor/themes/themes.ts`
  )
  const template = getTemplate(THEME_OPTIONS)
  await fs.writeFile(themeDeclaresPath, template)
  console.log(chalk.green.bold('ðŸ«§ðŸ«§ðŸ«§ Themes generated.'))
})()

function getTemplate(options: ThemeOptions) {
  const lightThemeFilename = normalizeThemeName(options.light)
  const darkThemeFilename = normalizeThemeName(options.dark)
  return `
/** Generated by \`scripts/pullThemes.ts\` */

export const themes = [{
    label: 'light',
    uiTheme: 'vs',
    path: './${lightThemeFilename}.json',
    // @ts-expect-error no types
    register: async () => (await import('./${lightThemeFilename}?raw')).default
  },{
    label: 'dark',
    uiTheme: 'vs-dark',
    path: './${darkThemeFilename}.json',
    // @ts-expect-error no types
    register: async () => (await import('./${darkThemeFilename}.json?raw')).default
  },
]
`.trim()
}

interface ThemeOptions {
  light: VSCodeThemeId
  dark: VSCodeThemeId
}
